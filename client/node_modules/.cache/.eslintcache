[{"/Users/jameszimmermann/mta_project/i-heart-mta/client/src/index.js":"1","/Users/jameszimmermann/mta_project/i-heart-mta/client/src/App.js":"2","/Users/jameszimmermann/mta_project/i-heart-mta/client/src/components/Map.js":"3","/Users/jameszimmermann/mta_project/i-heart-mta/client/src/components/Places.js":"4","/Users/jameszimmermann/mta_project/i-heart-mta/client/src/components/Directions.js":"5"},{"size":255,"mtime":1689602312613,"results":"6","hashOfConfig":"7"},{"size":651,"mtime":1689617780631,"results":"8","hashOfConfig":"7"},{"size":3346,"mtime":1689601322517,"results":"9","hashOfConfig":"7"},{"size":1441,"mtime":1689600623467,"results":"10","hashOfConfig":"7"},{"size":166,"mtime":1689600639751,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},"1falm0v",{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"15"},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"15"},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},"/Users/jameszimmermann/mta_project/i-heart-mta/client/src/index.js",[],[],[],"/Users/jameszimmermann/mta_project/i-heart-mta/client/src/App.js",[],[],"/Users/jameszimmermann/mta_project/i-heart-mta/client/src/components/Map.js",["30","31","32"],[],"import React from \"react\";\nimport { useState, useMemo, useCallback, useRef } from \"react\";\nimport {\n    GoogleMap,\n    Marker,\n    DirectionsRenderer,\n    Circle,\n    MarkerClusterer,\n} from \"@react-google-maps/api\"\n\nimport Places from \"./Places\";\nimport Directions from \"./Directions\";\n\nfunction Map() {\n\n\n    const [start, setStart] = useState()\n    const [end, setEnd] = useState()\n    const [directions, setDirections] = useState()\n    const mapRef = useRef()\n    const center = useMemo(() => ({ lat: 40.7826, lng: -73.9656}), [])\n    const options = useMemo(() => ({\n        mapId: \"7cb36be43290dc46\",\n        disableDefaultUI: true,\n        clickableIcons: false\n    }), [])\n\n\n    const onLoad = useCallback(map => (mapRef.current = map), [])\n    const fetchDirections = () => {\n        console.log(start, end)\n\n        const service = new window.google.maps.DirectionsService()\n        service.route({\n            origin: start,\n            destination: end,\n            travelMode: window.google.maps.TravelMode.TRANSIT,\n            transitOptions: {\n                routingPreference: \"FEWER_TRANSFERS\",\n                modes: ['TRAIN']\n            }\n        }, \n        (result, status) => {\n            if (status === 'OK' && result) {\n                setDirections(result)\n            }\n        })\n    }\n\n    function subwayfilter(route) {\n        for (const leg in route.routes[0].legs[0].steps) {\n            if (leg.travel_mode === 'TRANSIT') {\n                console.log('TRANSIT!')\n            }\n        }\n        return route\n    }\n\n    console.log(directions)\n\n    return(\n        <div className=\"continer\">\n            <div className=\"controls\">\n                <h1>Commute?</h1>\n                <Places \n                    position = \"start\"\n                    setPosition={(position) => {\n                        setStart(position)\n                        mapRef.current.panTo(position)\n                }}\n                />\n                <Places \n                    position = \"end\"\n                    setPosition={(position) => {\n                        setEnd(position)\n                        mapRef.current.panTo(position)\n                }}\n                />\n                {(start && end) ? \n                <button onClick={fetchDirections}>\n                    Directions\n                </button>\n                : null}\n                <div>\n                    {directions && <Directions directions={directions.routes[0].legs[0]}/>}\n                </div>\n            </div>\n            <div className=\"map\">\n                \n                <GoogleMap \n                zoom={14} \n                center={center} \n                mapContainerClassName=\"map-container\"\n                options={options}\n                onLoad={onLoad}\n                >\n                    {directions && \n                    (<DirectionsRenderer directions={directions} options={{\n                        polylineOptions: {\n                            strokeColor:'red'\n                        },\n                        suppressMarkers: true\n                    }}\n                    />)\n                    }\n\n                    {start && (<Marker position={start}/>)}\n                    {end && (<Marker position={end}/>)}\n                </GoogleMap>\n            </div>\n        </div>\n    )\n}\n\nexport default Map;","/Users/jameszimmermann/mta_project/i-heart-mta/client/src/components/Places.js",["33"],[],"import React from \"react\";\nimport usePlacesAutocomplete, { getGeocode, getLatLng}  from \"use-places-autocomplete\";\n\nimport { Combobox, ComboboxInput, ComboboxPopover, ComboboxList, ComboboxOption } from \"@reach/combobox\";\n\nfunction Places({ position, setPosition }) {\n\n    //Here I can plug in my stations table\n    const {ready, value, setValue, suggestions: {status, data}, clearSuggestions} = usePlacesAutocomplete()\n\n\n    const handleSelect = async(string) => {\n        setValue(string, false)\n        clearSuggestions()\n\n        const results = await getGeocode({address: string})\n        const {lat, lng} = getLatLng(results[0])\n        setPosition({lat, lng})\n\n    }\n\n    return (\n        <div>\n            <Combobox onSelect={handleSelect}>\n                <ComboboxInput \n                value={value} \n                onChange ={e => setValue(e.target.value)}\n                className=\"combobox-input\"\n                placeholder={position ===\"start\" ? \"Starting point\" : \"Ending point\"}\n                />\n                <ComboboxPopover>\n                    <ComboboxList>\n                        {status ===\"OK\" ? data.map(({ place_id, description }) => (\n                            <ComboboxOption key={place_id} value={description}/>\n                        )) : null}\n                    </ComboboxList>\n                </ComboboxPopover>\n            </Combobox>\n            \n        </div>\n    )\n}\n\nexport default Places;","/Users/jameszimmermann/mta_project/i-heart-mta/client/src/components/Directions.js",[],[],{"ruleId":"34","severity":1,"message":"35","line":7,"column":5,"nodeType":"36","messageId":"37","endLine":7,"endColumn":11},{"ruleId":"34","severity":1,"message":"38","line":8,"column":5,"nodeType":"36","messageId":"37","endLine":8,"endColumn":20},{"ruleId":"34","severity":1,"message":"39","line":50,"column":14,"nodeType":"36","messageId":"37","endLine":50,"endColumn":26},{"ruleId":"34","severity":1,"message":"40","line":9,"column":12,"nodeType":"36","messageId":"37","endLine":9,"endColumn":17},"no-unused-vars","'Circle' is defined but never used.","Identifier","unusedVar","'MarkerClusterer' is defined but never used.","'subwayfilter' is defined but never used.","'ready' is assigned a value but never used."]